package com.doku.repository;

import java.util.ArrayList;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import com.doku.model.Users.Parent;
import com.doku.util.HibernateUtil;

public class ParentRepository {
	
	private SessionFactory sessionFactory;
	//Parent ekleme işlemi
	public void addParent(Parent parent) {
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		Transaction transaction = null;
		
		try {
			transaction = session.beginTransaction();
			session.save(parent);
			transaction.commit();
		}catch(Exception ex) {
			if(transaction != null) {
				transaction.rollback();
			}
			ex.printStackTrace();
		}finally{
			session.close();
		}
	}
	
	// Kid ekleme işlemi
    public void addKidToParent(Long parentId, Kid kid) {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            Transaction transaction = session.beginTransaction();

            try {
                Parent parent = session.get(Parent.class, parentId); // Parent'ı ID'ye göre alıyoruz
                if (parent != null) {
                	if(parent.getKid() == null) {
                		parent.setKid(new ArrayList<Kid>());
                	}
                    parent.getKids().add(kid); // Parent'a Kid ekliyoruz
                    kid.setParent(parent); // Kid'e Parent'ı set ediyoruz
                    session.save(kid); // Kid'i kaydediyoruz
                    transaction.commit(); // Değişiklikleri kaydediyoruz
                }
            } catch (Exception ex) {
                if (transaction != null) {
                    transaction.rollback();
                }
                ex.printStackTrace();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
	
	//ID'ye göre parent getir
	public Parent getParentById(long id) {
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		Parent parent = null;
		try {
			session.beginTransaction();
			parent = session.get(Parent.class, id);
			session.getTransaction().commit();
		}catch(Exception ex) {
			ex.printStackTrace();
		}finally {
			session.close();
		}
		
		return parent;
	}
	
	//Tüm parent'leri getir
	public List<Parent> getAllParent(){
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		List<Parent> parents = null;
		try {
			session.beginTransaction();
			parents = session.createQuery("from Parent", Parent.class).getResultList();
			session.getTransaction().commit();
		}catch(Exception ex) {
			ex.printStackTrace();
		}finally {
			session.close();
		}
		
		return parents;
	}
	
	//Parenti güncelle
	public void updateParent(Parent parent) {
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		Transaction transaction = null;
		
		try {
			transaction = session.beginTransaction();
			session.update(parent);
			transaction.commit();
		}catch(Exception ex) {
			if(transaction != null) {
				transaction.rollback();
			}
			ex.printStackTrace();
		}finally {
			session.close();
		}
	}
	
	//Parenti sil
	public void deleteParent(int id) {
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		Transaction transaction = null;
		
		try {
			transaction = session.beginTransaction();
			Parent parent = session.get(Parent.class, id);
			if(parent != null) {
				session.delete(id);
			}
			transaction.commit();
		}catch(Exception ex){
			if(transaction != null) {
				transaction.rollback();
			}
			ex.printStackTrace();
		}finally {
			session.close();
		}
	}
}
